let sysl = //{./sysl};

\config \codegenGroups
    let config = //{./generate}.config(config);
    let (:app, :appname, :basepath, :endpoints, :module, ...) = config;
    let type = cond {'gRPC' <: sysl.patterns(app): 'grpc-app', _: 'rest-app'};
    let targets = //rel.union(endpoints >> (sysl.endpoint.calls(.@value) => .@item) => (.@item => .('target')));
    let apps = module('apps') where .@value('name') <: targets;
    {
        "server": {appname: //{./generate}.generate(config, codegenGroups(type))},
        "client": apps >> \app
            let config = //{./generate}.config((:basepath, :module, :app));
            let type = cond {'gRPC' <: sysl.patterns(app): 'grpc-client', _: 'rest-client'};
            //{./generate}.generate(config, codegenGroups(type)),
    }
